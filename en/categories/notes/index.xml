<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Notes on Liberation Notes</title>
    <link>https://blog.cmwang.net/en/categories/notes/</link>
    <description>Recent content in Notes on Liberation Notes</description>
    <image>
      <title>Liberation Notes</title>
      <url>https://blog.cmwang.net/47</url>
      <link>https://blog.cmwang.net/47</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 13 Oct 2023 14:02:18 +0800</lastBuildDate><atom:link href="https://blog.cmwang.net/en/categories/notes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Configuring a custom domain for your GitHub Pages site</title>
      <link>https://blog.cmwang.net/en/posts/2023/10/custom-domain-for-github-pages/</link>
      <pubDate>Fri, 13 Oct 2023 14:02:18 +0800</pubDate>
      
      <guid>https://blog.cmwang.net/en/posts/2023/10/custom-domain-for-github-pages/</guid>
      <description>This article show you how to set up a custom domain for a GitHub Page, using Godaddy as an example.</description>
      <content:encoded><![CDATA[<p>Setting up a CNAME for your GitHub Pages does not require additional payment, but you need to have a private domain first. Here, we assume that we have already purchased a domain from <a href="https://www.godaddy.com/">Godaddy</a>, so let&rsquo;s go to the <a href="https://sg.godaddy.com/help/manage-dns-records-680">Godaddy DNS settings page</a> to configure it.</p>
<ol>
<li>First, query GitHub&rsquo;s IP via Terminal:</li>
</ol>


<div class="terminal space shadow">
    <div class="top">
        <div class="btns">
            <span class="circle red"></span>
            <span class="circle yellow"></span>
            <span class="circle green"></span>
        </div>
        <div class="title">
            dig {Your Domain}.github.io
        </div>
    </div>
    <div class="terminalbody"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">dig xxxx.github.io
</span></span></code></pre></div></div>
</div>
<br />

<p><img loading="lazy" src="4.png" alt="dig"  />
</p>
<ol start="2">
<li>Go to the Godaddy DNS page and set up 4 A Records and 1 CNAME Record, please refer to the image.</li>
</ol>
<p><img loading="lazy" src="3.png" alt="godaddy setting"  />
</p>
<ol start="3">
<li>Add a <code>CNAME</code> file with <code>xxx.{Domain Name}</code> to the private repo.</li>
</ol>
<p><img loading="lazy" src="5.png" alt="CNAME File"  />
</p>
<ol start="4">
<li>Set up CNAME on the page and check the <code>Enforce HTTPS</code> option.</li>
</ol>
<p><img loading="lazy" src="1.png" alt="github pages"  />

<img loading="lazy" src="2.png" alt="custom domain setting"  />
</p>
<p>It might take some time to take effect. If everything is set up correctly, the DNS Check in step 4 should pass.</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site">Managing a custom domain for your GitHub Pages site</a></li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>Hugo Deployment Guide</title>
      <link>https://blog.cmwang.net/en/posts/2023/10/hugo-get-started/</link>
      <pubDate>Tue, 10 Oct 2023 20:01:46 +0800</pubDate>
      
      <guid>https://blog.cmwang.net/en/posts/2023/10/hugo-get-started/</guid>
      <description>This guide will walk you through the process of creating a private website on GitHub and deploying it to GitHub Pages</description>
      <content:encoded><![CDATA[<p>Welcome to the world of Hugo, where you can swiftly create your personal website! This guide will walk you through the process of creating a private website on GitHub and deploying it to GitHub Pages.</p>
<h2 id="whats-included-in-this-guide">What&rsquo;s included in this guide</h2>
<ul>
<li><code>.gitignore</code>: Excludes files from version control.</li>
<li><code>.github/workflows/hugo.yml</code>: Uses GitHub Actions to deploy your private Hugo repository to a public GitHub Pages repository.</li>
</ul>
<h2 id="steps">Steps</h2>
<ol>
<li>
<p>Create a private repository <code>hugo-site</code> on <a href="https://github.com/">GitHub</a> to manage your website source code, ensuring to include the README.md file.</p>
</li>
<li>
<p>Create a public repository <code>{YOUR_USER_NAME}.github.io</code> on <a href="https://github.com/">GitHub</a> to upload your static web pages to <a href="https://pages.github.com/">GitHub Pages</a>.</p>
</li>
<li>
<p>Clone <code>hugo-site</code> to your local machine:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git clone https://github.com/<span class="o">{</span>YOUR_USER_NAME<span class="o">}</span>/hugo-site.git
</span></span></code></pre></div><p>Alternatively, if you are using Git Submodules:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git clone --recursive https://github.com/<span class="o">{</span>YOUR_USER_NAME<span class="o">}</span>/hugo-site.git
</span></span></code></pre></div></li>
<li>
<p>Create a Hugo project in the same directory as <code>hugo-site</code> (not inside <code>hugo-site</code>):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">hugo new site hugo-site --force
</span></span></code></pre></div></li>
<li>
<p>Add an example theme. Here, we&rsquo;ll use PaperMod as an example:</p>
</li>
</ol>


<div class="terminal space shadow">
    <div class="top">
        <div class="btns">
            <span class="circle red"></span>
            <span class="circle yellow"></span>
            <span class="circle green"></span>
        </div>
        <div class="title">
            Add theme
        </div>
    </div>
    <div class="terminalbody"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="nb">cd</span> hugo-site
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git submodule add --depth<span class="o">=</span><span class="m">1</span> https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;theme : &#39;PaperMod&#39;&#34;</span> &gt;&gt; hugo.yaml
</span></span></code></pre></div></div>
</div>
<br />

<ol start="6">
<li>
<p>Copy the <a href="https://raw.githubusercontent.com/taka-wang/example-hugo-site/main/.gitignore">.gitignore</a> file into <code>hugo-site</code>.</p>
</li>
<li>
<p>[Optional] Set up GitHub Action for automatic deployment:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"> mkdir -p .github/workflows/
</span></span><span class="line"><span class="cl"> touch .github/workflows/hugo.yml
</span></span></code></pre></div><p>Copy the contents of <a href="https://raw.githubusercontent.com/taka-wang/example-hugo-site/main/.github/workflows/hugo.yml">hugo.yml</a> into the newly created <code>hugo.yml</code> file. Remember to modify these two parts:</p>
<ul>
<li><strong>token: ${{ secrets.ACCESS_TOKEN }}</strong>: Use a personal access token for this private repository.</li>
<li><strong>repository-name: YOUR_USER_NAME}}/YOUR_USER_NAME.github.io</strong>: Replace <code>YOUR_USER_NAME</code> with your GitHub username.</li>
</ul>
</li>
<li>
<p>Test your Hugo website:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">hugo server -D
</span></span></code></pre></div></li>
<li>
<p>Start writing your own posts:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">hugo new posts/20231006/index.md
</span></span></code></pre></div><p>Begin writing in <code>index.md</code> inside <code>content/posts/20231006</code>, and place images in the same folder.</p>
</li>
<li>
<p>Congratulations, you&rsquo;ve configured your private repository! Don&rsquo;t forget to commit your changes to the private repository. Best of luck creating your beautiful website!</p>
</li>
</ol>
<h2 id="references">References</h2>
<ul>
<li><a href="https://github.com/JamesIves/github-pages-deploy-action/issues/624#issuecomment-791982883">How to setup ACCESS Token</a></li>
<li><a href="https://blog.euc-rt.me/post/github-actions-publish-private-hugo-repo-to-public-pages-site/">Using GitHub Actions to Publish Hugo Site From Private to Public Repo</a></li>
<li><a href="https://gohugo.io/getting-started/quick-start/">Learn to create a Hugo site in minutes.</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>How to Install Hugo</title>
      <link>https://blog.cmwang.net/en/posts/2023/10/how-to-install-hugo/</link>
      <pubDate>Tue, 10 Oct 2023 19:41:05 +0800</pubDate>
      
      <guid>https://blog.cmwang.net/en/posts/2023/10/how-to-install-hugo/</guid>
      <description>We will introduce how to install hugo on your system in this post.</description>
      <content:encoded><![CDATA[<h2 id="macos">MacOS</h2>
<p>Installing via <code>Homebrew</code> Package Manager is the most convenient method.</p>


<div class="terminal space shadow">
    <div class="top">
        <div class="btns">
            <span class="circle red"></span>
            <span class="circle yellow"></span>
            <span class="circle green"></span>
        </div>
        <div class="title">
            Install Packages with Homebrew on macOS
        </div>
    </div>
    <div class="terminalbody"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># install homebrew</span>
</span></span><span class="line"><span class="cl">/bin/bash -c <span class="s2">&#34;</span><span class="k">$(</span>curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh<span class="k">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># install hugo</span>
</span></span><span class="line"><span class="cl">brew install hugo
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># verify hugo installation</span>
</span></span><span class="line"><span class="cl">hugo version
</span></span><span class="line"><span class="cl">&gt; hugo v0.119.0-b84644c008e0dc2c4b67bd69cccf87a41a03937e+extended darwin/amd64 <span class="nv">BuildDate</span><span class="o">=</span>2023-09-24T15:20:17Z <span class="nv">VendorInfo</span><span class="o">=</span>brew
</span></span></code></pre></div></div>
</div>
<br />

<h2 id="windows">Windows</h2>
<p>Open <strong>powershell</strong> with Task Manager: Press <code>win + x</code>, navigate to Windows PowerShell (Admin), make sure to select <strong>Run as administrator</strong>.</p>
<p>Check the execution policy:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">Get-ExecutionPolicy
</span></span></code></pre></div><p>If it shows <strong>Restricted</strong>, run the following command:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">Set-ExecutionPolicy AllSigned
</span></span></code></pre></div><p>Install Chocolatey:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">Set-ExecutionPolicy Bypass -Scope Process -Force<span class="p">;</span> iex <span class="o">((</span>New-Object System.Net.WebClient<span class="o">)</span>.DownloadString<span class="o">(</span><span class="s1">&#39;https://chocolatey.org/install.ps1&#39;</span><span class="o">))</span>
</span></span></code></pre></div><p>Verify the installation by typing in <strong>powershell</strong>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">choco
</span></span><span class="line"><span class="cl"><span class="c1"># If you receive a response, the installation is successful</span>
</span></span></code></pre></div><p>Now, you can install Hugo using Chocolatey! 👇👇👇</p>


<div class="terminal space shadow">
    <div class="top">
        <div class="btns">
            <span class="circle red"></span>
            <span class="circle yellow"></span>
            <span class="circle green"></span>
        </div>
        <div class="title">
            Install Packages with Chocolatey on Windows
        </div>
    </div>
    <div class="terminalbody"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># install hugo</span>
</span></span><span class="line"><span class="cl">choco install hugo-extended
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># verify hugo installation</span>
</span></span><span class="line"><span class="cl">hugo version
</span></span><span class="line"><span class="cl">&gt; hugo v0.119.0-b84644c008e0dc2c4b67bd69cccf87a41a03937e...
</span></span></code></pre></div></div>
</div>
<br />

<hr>
<h2 id="references">References</h2>
<ul>
<li><a href="https://gohugo.io/installation/macos/">Install Hugo on macOS</a></li>
<li><a href="https://gohugo.io/installation/windows/">Install Hugo on Windows</a></li>
<li><a href="https://blog.darkthread.net/blog/choco-install-notes-for-new-windows/">我的 Windows 新裝機 Chocolatey 安裝清單</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Design Patterns Explained - CH8</title>
      <link>https://blog.cmwang.net/en/posts/2017/01/design-patterns-explained-ch8/</link>
      <pubDate>Sat, 21 Jan 2017 20:12:53 +0000</pubDate>
      
      <guid>https://blog.cmwang.net/en/posts/2017/01/design-patterns-explained-ch8/</guid>
      <description>&lt;h1 id=&#34;expanding-our-horizons&#34;&gt;Expanding Our Horizons&lt;/h1&gt;
&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Object&lt;/li&gt;
&lt;li&gt;Encapsulation&lt;/li&gt;
&lt;li&gt;Inheritance&lt;/li&gt;
&lt;li&gt;Handling variation&lt;/li&gt;
&lt;li&gt;Commonality and variability analysis&lt;/li&gt;
&lt;li&gt;Abstract class and its derived classes&lt;/li&gt;
&lt;/ul&gt;</description>
      <content:encoded><![CDATA[<h1 id="expanding-our-horizons">Expanding Our Horizons</h1>
<h2 id="overview">Overview</h2>
<ul>
<li>Object</li>
<li>Encapsulation</li>
<li>Inheritance</li>
<li>Handling variation</li>
<li>Commonality and variability analysis</li>
<li>Abstract class and its derived classes</li>
</ul>
<h2 id="objects-traditional-view-and-new-view">Objects: Traditional view and new view</h2>
<h3 id="traditional-view">Traditional View</h3>
<ul>
<li>Data with methods - <strong>smart data</strong></li>
<li>too narrow from <strong>implementation</strong> perspective</li>
</ul>
<h3 id="broad-view">Broad View</h3>
<ul>
<li>From <strong>conceptual</strong> perspective</li>
<li>an object is an <em>entity that has responsibilities</em> (責任), these responsibilities define the behavior of the object. Or an <em>entity that has specific behavior</em> (特定行為).</li>
</ul>
<h2 id="focus-on-intentionmotivation-not-implementation">Focus on intention/motivation not implementation</h2>
<p>This view enables us to build software in two steps:</p>
<ol>
<li>Make a preliminary design without worrying about all the details involved.</li>
<li>Implement the design.</li>
</ol>
<p>The reason this works is that we only have to focus on the object’s <strong>public interface</strong> — the communication window through which I ask the object to do something.</p>
<p>Hiding implementations behind interfaces essentially <strong>decouples</strong> them from the using objects.</p>
<hr>
<h2 id="encapsulation-traditional-view-and-new-view">Encapsulation: Traditional view and new view</h2>
<h3 id="traditional-view-1">Traditional View</h3>
<ul>
<li>data hiding</li>
</ul>
<h3 id="broad-view-1">Broad View</h3>
<ul>
<li><strong>any kind of hiding</strong>
<ul>
<li>Implementations (data, methods..)</li>
<li><strong>Drived</strong> classes (<strong>Encapsulation of type</strong> is achieved when there is an <em>abstract class</em> with derivations (or an interface with implementations) that are used <em>polymorphically</em>)</li>
<li>Design details</li>
<li>Instantiation rules (ex. creational patterns)</li>
</ul>
</li>
</ul>
<h2 id="advantage">Advantage</h2>
<p>It gives us a better way to split up (decompose) our programs. The <strong>encapsulating layers</strong> become the <strong>interfaces</strong> we design to. (封裝層成為設計需要遵循的介面)</p>
<p>By encapsulating different kinds of subclasses (<strong>encapsulation of type</strong>), we can add new ones without changing any of the client programs using them. (<em>GoF typically means when they mention encapsulation</em>)</p>
<hr>
<h2 id="inheritance">Inheritance</h2>
<h3 id="traditional-view-2">Traditional View</h3>
<ul>
<li><strong>reuse</strong> of classes</li>
<li>achived by creating classes and then deriving new (<em>spcialized</em>) classes bases on these base (<em>generalized</em>) classes</li>
</ul>
<h3 id="broad-view-2">Broad View</h3>
<ul>
<li>using inheritance for specialization, however
<ul>
<li>can cause weak cohesion</li>
<li>reduces possibility of reuse</li>
<li>does not scale well with variation</li>
</ul>
</li>
<li><em>to classify classes as things that behave the same way</em>. (<strong>placeholder</strong>)</li>
</ul>
<hr>
<h2 id="find-what-is-varying-and-encapsulate-it">Find What Is Varying and Encapsulate It</h2>
<blockquote>
<p>Consider <strong>what</strong> should be variable in your design. This approach is the opposite of focusing on the <strong>cause</strong> of redesign. Instead of considering what might force a change to a design, consider what you want to be <strong><em>able</em></strong> to change without redesign. The focus here is on <strong><em>encapsulating the concept that varies</em></strong>, a theme of many design patterns.
&ndash; GoF, Design Patterns</p>
</blockquote>
<hr>
<h2 id="more-about-gofs-encapsulation">More about GoF&rsquo;s Encapsulation</h2>
<ul>
<li>Design Patterns use inheritance to classify variations in behaviors.</li>
<li>Hiding classes with an abstract class or interface — <strong>type encapsulation</strong>.</li>
<li>Containing a reference of this <em>abstract class</em> or <em>interface</em> type (aggregation) <strong>hides</strong> these <em>derived classes</em> that represent <strong>variations</strong> in behavior.</li>
<li>In effect, many design patterns <em>use encapsulation to create layers</em> between objects.</li>
</ul>
<hr>
<h2 id="containing-variation-in-data-vs-containing-variation-in-behavior">Containing variation in data vs containing variation in behavior</h2>
<h3 id="handling-variation-in-data">Handling variation in data</h3>
<ul>
<li>Have a data member that tells me what type of movement my object has.</li>
<li>Have two different types of <strong>Animals</strong> (both derived from the base <strong>Animal</strong> class) — one for walking and one for flying.</li>
</ul>
<h3 id="handling-variation-in-behavior-with-objects">Handling variation in behavior with objects</h3>
<p>Using objects to contain variation in attributes and using objects to contain variation in behavior are very similar. Don&rsquo;t afraid.</p>
<hr>
<h2 id="commonality-and-variability">Commonality and Variability</h2>
<p>Identify <strong>where</strong> things vary (commonality analysis) and then identify <strong>how</strong> they vary (variability analysis).</p>
<p><strong>Commonality analysis</strong> is the search for common elements that helps us understand how family members are the same.</p>
<p><strong>Variability analysis</strong> reveals how family members vary. Variability only makes sense within a given commonality.</p>
<p>Ex. Whiteboard marker, pencil, ballpoint pen</p>
<ul>
<li>Commonality: writing instrument</li>
<li>Variability: material to write, shape..</li>
</ul>
<h2 id="commonality-and-variability-and-abstract-class">Commonality and Variability and Abstract class</h2>
<p><strong>Commonality analysis</strong> seeks structure that is unlikely to change over time, while <strong>variability analysis</strong> captures structure that is likely to change. <strong><em>Variability analysis makes sense only in terms of the context defined by the associated commonality analysis</em></strong>.
In other words, if variations are the specific concrete cases in the domain, commonality defines the concepts in the domain that tie them together. The <strong><em>common concepts</em></strong> will be represented by <strong>abstract classes</strong>. The <strong><em>variations</em></strong> found by variability analysis will be implemented by the <strong>concrete classes</strong>.</p>
<h2 id="relationship-between-commonality-and-variability-perspectives-and-abstract-classes">Relationship between Commonality and Variability, perspectives, and abstract classes</h2>
<p><img loading="lazy" src="relationship.png" alt="relationship"  />
</p>
<hr>
<h2 id="benefits-of-using-abstract-classes-for-specialization">Benefits of using abstract classes for specialization</h2>
<p><img loading="lazy" src="benefits.png" alt="benefits"  />
</p>
<hr>
<h2 id="two-step-procedure-for-design">Two-Step Procedure for Design</h2>
<p>Ask yourself:</p>
<ul>
<li>When defining an <strong>abstract class</strong> (commonality):
<ul>
<li>What <strong>interface</strong> is needed to handle all the responsibilities (core concepts from the conceptual perspective) of this class?</li>
</ul>
</li>
<li>When defining <strong>derived classes</strong>:
<ul>
<li>Given this particular implementation (this <strong>variation</strong>), how can I implement it (variation) with the given specification?</li>
</ul>
</li>
</ul>
<hr>
<h2 id="take-away">Take away</h2>
<p>Think object-oriented in a broad way.</p>
<ul>
<li>Object: an <em>entity that has responsibilities (specific behavior)</em></li>
<li>Encapsulation: <strong>any</strong> kind of <strong>hiding</strong> (instantiation rule, type..)</li>
<li>Inheritance: use for <strong>specialization</strong> and <em>classify classes as things that behave the same way</em>.</li>
</ul>
<p><strong>Find what is varying and encapsulate it</strong> (in behavior).</p>
<p>Commonality, variability and abstract class: use inheritance to classify variations in behaviors.</p>]]></content:encoded>
    </item>
    
  </channel>
</rss>
